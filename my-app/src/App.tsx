import React, { useState } from "react";

const styles: { [key: string]: React.CSSProperties } = {
  container: {
    maxWidth: "800px",
    margin: "0 auto",
    padding: "24px",
    borderRadius: "12px",
    boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)",
    background: "linear-gradient(to right, #e8f0ff, #f0e6ff)",
    fontFamily: "Arial, sans-serif",
  },
  header: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: "24px",
  },
  questionCount: {
    fontSize: "18px",
    fontWeight: "bold",
    color: "#5b21b6",
  },
  score: {
    fontSize: "18px",
    fontWeight: "bold",
    color: "#059669",
  },
  questionContainer: {
    marginBottom: "24px",
  },
  questionHeader: {
    display: "flex",
    alignItems: "center",
    gap: "16px",
    marginBottom: "20px",
  },
  icon: {
    fontSize: "32px",
  },
  question: {
    fontSize: "20px",
    fontWeight: "bold",
    color: "#1f2937",
  },
  optionsGrid: {
    display: "flex",
    flexDirection: "column",
    gap: "12px",
  },
  optionButton: {
    padding: "16px",
    textAlign: "left",
    borderRadius: "8px",
    border: "2px solid #e5e7eb",
    backgroundColor: "white",
    cursor: "pointer",
    transition: "all 0.2s ease",
    fontSize: "16px",
  },
  animation: {
    position: "fixed",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    fontSize: "64px",
    animation: "ping 1s cubic-bezier(0, 0, 0.2, 1)",
  },
  resultsContainer: {
    textAlign: "center",
  },
  resultsTitle: {
    fontSize: "24px",
    fontWeight: "bold",
    color: "#5b21b6",
    marginBottom: "16px",
  },
  resultsScore: {
    fontSize: "20px",
    marginBottom: "24px",
  },
  perfectScore: {
    fontSize: "48px",
    animation: "spin 2s linear infinite",
  },
  resetButton: {
    padding: "12px 24px",
    backgroundColor: "#5b21b6",
    color: "white",
    border: "none",
    borderRadius: "8px",
    cursor: "pointer",
    fontSize: "16px",
    transition: "background-color 0.2s ease",
  },
};

// Add hover effects
const hoverStyles = {
  optionButton: {
    ":hover": {
      borderColor: "#a78bfa",
      transform: "scale(1.02)",
      boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)",
    },
  },
  resetButton: {
    ":hover": {
      backgroundColor: "#7c3aed",
    },
  },
};

// Add keyframe animations
const keyframes = `
  @keyframes ping {
    75%, 100% {
      transform: translate(-50%, -50%) scale(2);
      opacity: 0;
    }
  }
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
`;

const QuizGame = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [showScore, setShowScore] = useState(false);
  const [showAnimation, setShowAnimation] = useState(false);

  // Add styles to head
  React.useEffect(() => {
    const styleSheet = document.createElement("style");
    styleSheet.innerText = keyframes;
    document.head.appendChild(styleSheet);
    return () => styleSheet.remove();
  }, []);

  const questions = [
    {
      question: "–ì–¥–µ —Å–µ –Ω–∞—ò—á–µ—à—õ–µ –∏–∑–≤–æ–¥–µ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏?",
      options: ["–£ –ø—Ä–∏—Ä–æ–¥–∏", "–£ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—ò–∞–º–∞", "–£ —É—á–∏–æ–Ω–∏—Ü–∏", "–£ –ø–∞—Ä–∫—É"],
      correct: 1,
      icon: "üß™",
    },
    {
      question: "–®—Ç–∞ –Ω–∞—É—á–Ω–∏—Ü–∏ –∫–æ—Ä–∏—Å—Ç–µ –¥–∞ –±–∏ –ø—Ä–æ—É—á–∞–≤–∞–ª–∏ –ø—Ä–∏—Ä–æ–¥—É?",
      options: [
        "–°–∞–º–æ –ø–æ—Å–º–∞—Ç—Ä–∞—ö–µ",
        "–°–∞–º–æ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ",
        "–†–∞–∑–ª–∏—á–∏—Ç–µ –º–µ—Ç–æ–¥–µ –∏ –ø–æ—Å—Ç—É–ø–∫–µ",
        "–°–∞–º–æ —Ü—Ä—Ç–∞—ö–µ",
      ],
      correct: 2,
      icon: "üî¨",
    },
    {
      question: "–î–∞ –ª–∏ —Å—É —Å–≤–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—ò–µ –∏—Å—Ç–æ –æ–ø—Ä–µ–º—ô–µ–Ω–µ?",
      options: [
        "–î–∞, —Å–≤–µ —Å—É –∏—Å—Ç–µ",
        "–ù–µ, —Ä–∞–∑–ª–∏—á–∏—Ç–æ —Å—É –æ–ø—Ä–µ–º—ô–µ–Ω–µ",
        "–ó–∞–≤–∏—Å–∏ –æ–¥ –¥–∞–Ω–∞",
        "–ù–µ–º–∞ —Ä–∞–∑–ª–∏–∫–µ",
      ],
      correct: 1,
      icon: "‚öóÔ∏è",
    },
    {
      question: "–®—Ç–∞ –º–æ–∂–µ –¥–∞ —Å–µ –Ω–∞—í–µ —É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—ò–∞–º–∞?",
      options: [
        "–°–∞–º–æ —Ö–µ–º–∏–∫–∞–ª–∏—ò–µ",
        "–°–∞–º–æ –∂–∏–≤–æ—Ç–∏—ö–µ",
        "–°–∞–º–æ –±–∏—ô–∫–µ",
        "–ê–ø–∞—Ä–∞—Ç–∏, —Ö–µ–º–∏–∫–∞–ª–∏—ò–µ –∏ –∂–∏–≤–∞ –±–∏—õ–∞",
      ],
      correct: 3,
      icon: "üß´",
    },
  ];

  const handleAnswer = (selectedAnswer: number) => {
    const isCorrect = selectedAnswer === questions[currentQuestion].correct;

    if (isCorrect) {
      setScore(score + 1);
      setShowAnimation(true);
    }

    setTimeout(() => {
      setShowAnimation(false);
      if (currentQuestion + 1 < questions.length) {
        setCurrentQuestion(currentQuestion + 1);
      } else {
        setShowScore(true);
      }
    }, 1000);
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setScore(0);
    setShowScore(false);
  };

  if (showScore) {
    return (
      <div style={styles.container}>
        <div style={styles.resultsContainer}>
          <h2 style={styles.resultsTitle}>–ö–≤–∏–∑ —ò–µ –∑–∞–≤—Ä—à–µ–Ω! üéâ</h2>
          <p style={styles.resultsScore}>
            –û—Å–≤–æ—ò–∏–ª–∏ —Å—Ç–µ {score} –æ–¥ {questions.length} –±–æ–¥–æ–≤–∞!
          </p>
          {score === questions.length && (
            <div>
              <span style={styles.perfectScore}>‚≠ê</span>
            </div>
          )}
          <button
            style={{ ...styles.resetButton }}
            onMouseOver={(e: React.MouseEvent<HTMLButtonElement>) =>
              Object.assign(e.currentTarget.style, hoverStyles.resetButton[":hover"])
            }
            onClick={resetQuiz}
          >
            –ò–≥—Ä–∞—ò –ø–æ–Ω–æ–≤–æ
          </button>
        </div>
      </div>
    );
  }

  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <span style={styles.questionCount}>
          –ü–∏—Ç–∞—ö–µ {currentQuestion + 1}/{questions.length}
        </span>
        <span style={styles.score}>–ë–æ–¥–æ–≤–∏: {score}</span>
      </div>

      <div style={styles.questionContainer}>
        <div style={styles.questionHeader}>
          <span style={styles.icon}>{questions[currentQuestion].icon}</span>
          <h2 style={styles.question}>{questions[currentQuestion].question}</h2>
        </div>

        <div style={styles.optionsGrid}>
          {questions[currentQuestion].options.map((option, index) => (
            <button
              key={index}
              style={{ ...styles.optionButton }}
              onMouseOver={(e: React.MouseEvent<HTMLButtonElement>) =>
                Object.assign(
                  e.currentTarget.style,
                  hoverStyles.optionButton[":hover"]
                )
              }
              onMouseOut={(e: React.MouseEvent<HTMLButtonElement>) => {
                e.currentTarget.style.borderColor = "#e5e7eb";
                e.currentTarget.style.transform = "none";
                e.currentTarget.style.boxShadow = "none";
              }}
              onClick={() => handleAnswer(index)}
            >
              {option}
            </button>
          ))}
        </div>
      </div>

      {showAnimation && <div style={styles.animation}>‚≠ê</div>}
    </div>
  );
};

export default QuizGame;
